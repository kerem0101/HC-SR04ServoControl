
HC-SR04ServoControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c04  08002c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08002c50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002c50  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096f6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016cb  00000000  00000000  0002972a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fea5  00000000  00000000  0002c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7cd  00000000  00000000  0003c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064690  00000000  00000000  000479c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ac052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  000ac0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bec 	.word	0x08002bec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002bec 	.word	0x08002bec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <delay_us>:
static void MX_USART2_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void delay_us (uint16_t us)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <delay_us+0x30>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2200      	movs	r2, #0
 8000232:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <delay_us+0x30>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	429a      	cmp	r2, r3
 8000242:	d3f8      	bcc.n	8000236 <delay_us+0x16>
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	b002      	add	sp, #8
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	20000078 	.word	0x20000078

08000254 <Read_HCSR04>:

uint32_t Read_HCSR04(){
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]

	GPIOA->ODR = 0x100;
 800025e:	2390      	movs	r3, #144	; 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2280      	movs	r2, #128	; 0x80
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	615a      	str	r2, [r3, #20]
	delay_us(10);
 8000268:	200a      	movs	r0, #10
 800026a:	f7ff ffd9 	bl	8000220 <delay_us>
	GPIOA->ODR = 0;
 800026e:	2390      	movs	r3, #144	; 0x90
 8000270:	05db      	lsls	r3, r3, #23
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]

	while(!(GPIOA->IDR & 0x200));
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	2390      	movs	r3, #144	; 0x90
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	691a      	ldr	r2, [r3, #16]
 800027e:	2380      	movs	r3, #128	; 0x80
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	4013      	ands	r3, r2
 8000284:	d0f8      	beq.n	8000278 <Read_HCSR04+0x24>

	while(GPIOA->IDR & 0x200){
 8000286:	e005      	b.n	8000294 <Read_HCSR04+0x40>
		temp++;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
		delay_us(1);
 800028e:	2001      	movs	r0, #1
 8000290:	f7ff ffc6 	bl	8000220 <delay_us>
	while(GPIOA->IDR & 0x200){
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	691a      	ldr	r2, [r3, #16]
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	4013      	ands	r3, r2
 80002a0:	d1f2      	bne.n	8000288 <Read_HCSR04+0x34>
	}
	return temp;
 80002a2:	687b      	ldr	r3, [r7, #4]
}
 80002a4:	0018      	movs	r0, r3
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b002      	add	sp, #8
 80002aa:	bd80      	pop	{r7, pc}

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fb62 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f84c 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f9a0 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002bc:	f000 f96e 	bl	800059c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80002c0:	f000 f8ea 	bl	8000498 <MX_TIM3_Init>
  MX_TIM1_Init();
 80002c4:	f000 f890 	bl	80003e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <main+0x90>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fb7b 	bl	80019c8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_Base_Start(&htim1);
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <main+0x94>)
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 fadb 	bl	8001890 <HAL_TIM_Base_Start>

	  time = Read_HCSR04();
 80002da:	f7ff ffbb 	bl	8000254 <Read_HCSR04>
 80002de:	0002      	movs	r2, r0
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <main+0x98>)
 80002e2:	601a      	str	r2, [r3, #0]
	  distance = time / 29;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <main+0x98>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	211d      	movs	r1, #29
 80002ea:	0018      	movs	r0, r3
 80002ec:	f7ff ff0c 	bl	8000108 <__udivsi3>
 80002f0:	0003      	movs	r3, r0
 80002f2:	001a      	movs	r2, r3
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <main+0x9c>)
 80002f6:	601a      	str	r2, [r3, #0]

	  if(distance < 10){
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <main+0x9c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b09      	cmp	r3, #9
 80002fe:	d806      	bhi.n	800030e <main+0x62>
		  TIM3->CCR1 = 25;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <main+0xa0>)
 8000302:	2219      	movs	r2, #25
 8000304:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 8000306:	2064      	movs	r0, #100	; 0x64
 8000308:	f000 fb9a 	bl	8000a40 <HAL_Delay>
 800030c:	e7e1      	b.n	80002d2 <main+0x26>
	  }
	  else if(distance < 20 && distance > 10){
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <main+0x9c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b13      	cmp	r3, #19
 8000314:	d80a      	bhi.n	800032c <main+0x80>
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <main+0x9c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b0a      	cmp	r3, #10
 800031c:	d906      	bls.n	800032c <main+0x80>
		  TIM3->CCR1 = 75;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <main+0xa0>)
 8000320:	224b      	movs	r2, #75	; 0x4b
 8000322:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 8000324:	2064      	movs	r0, #100	; 0x64
 8000326:	f000 fb8b 	bl	8000a40 <HAL_Delay>
 800032a:	e005      	b.n	8000338 <main+0x8c>
	  }
	  else{
		  TIM3->CCR1 = 125;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <main+0xa0>)
 800032e:	227d      	movs	r2, #125	; 0x7d
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 8000332:	2064      	movs	r0, #100	; 0x64
 8000334:	f000 fb84 	bl	8000a40 <HAL_Delay>
	  HAL_TIM_Base_Start(&htim1);
 8000338:	e7cb      	b.n	80002d2 <main+0x26>
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	20000030 	.word	0x20000030
 8000340:	20000078 	.word	0x20000078
 8000344:	20000028 	.word	0x20000028
 8000348:	2000002c 	.word	0x2000002c
 800034c:	40000400 	.word	0x40000400

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b091      	sub	sp, #68	; 0x44
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	2410      	movs	r4, #16
 8000358:	193b      	adds	r3, r7, r4
 800035a:	0018      	movs	r0, r3
 800035c:	2330      	movs	r3, #48	; 0x30
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f002 fc3b 	bl	8002bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2310      	movs	r3, #16
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 fc34 	bl	8002bdc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000374:	0021      	movs	r1, r4
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2202      	movs	r2, #2
 800037a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2201      	movs	r2, #1
 8000380:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2210      	movs	r2, #16
 8000386:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2202      	movs	r2, #2
 800038c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	0212      	lsls	r2, r2, #8
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	0352      	lsls	r2, r2, #13
 800039c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fdb0 	bl	8000f0c <HAL_RCC_OscConfig>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003b0:	f000 f9b2 	bl	8000718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b4:	003b      	movs	r3, r7
 80003b6:	2207      	movs	r2, #7
 80003b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	003b      	movs	r3, r7
 80003bc:	2202      	movs	r2, #2
 80003be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	003b      	movs	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	003b      	movs	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003cc:	003b      	movs	r3, r7
 80003ce:	2101      	movs	r1, #1
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f8b9 	bl	8001548 <HAL_RCC_ClockConfig>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003da:	f000 f99d 	bl	8000718 <Error_Handler>
  }
}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b011      	add	sp, #68	; 0x44
 80003e4:	bd90      	pop	{r4, r7, pc}
	...

080003e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	2308      	movs	r3, #8
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2310      	movs	r3, #16
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f002 fbef 	bl	8002bdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	003b      	movs	r3, r7
 8000400:	0018      	movs	r0, r3
 8000402:	2308      	movs	r3, #8
 8000404:	001a      	movs	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f002 fbe8 	bl	8002bdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <MX_TIM1_Init+0xa4>)
 800040e:	4a20      	ldr	r2, [pc, #128]	; (8000490 <MX_TIM1_Init+0xa8>)
 8000410:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_TIM1_Init+0xa4>)
 8000414:	222f      	movs	r2, #47	; 0x2f
 8000416:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <MX_TIM1_Init+0xa4>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_TIM1_Init+0xa4>)
 8000420:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <MX_TIM1_Init+0xac>)
 8000422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <MX_TIM1_Init+0xa4>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_TIM1_Init+0xa4>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_TIM1_Init+0xa4>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_TIM1_Init+0xa4>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 f9d9 	bl	80017f0 <HAL_TIM_Base_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000442:	f000 f969 	bl	8000718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	2108      	movs	r1, #8
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	0152      	lsls	r2, r2, #5
 800044e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000450:	187a      	adds	r2, r7, r1
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_TIM1_Init+0xa4>)
 8000454:	0011      	movs	r1, r2
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fc24 	bl	8001ca4 <HAL_TIM_ConfigClockSource>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000460:	f000 f95a 	bl	8000718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000464:	003b      	movs	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046a:	003b      	movs	r3, r7
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000470:	003a      	movs	r2, r7
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_TIM1_Init+0xa4>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f002 f80e 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000480:	f000 f94a 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b006      	add	sp, #24
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000078 	.word	0x20000078
 8000490:	40012c00 	.word	0x40012c00
 8000494:	0000ffff 	.word	0x0000ffff

08000498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08e      	sub	sp, #56	; 0x38
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049e:	2328      	movs	r3, #40	; 0x28
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	0018      	movs	r0, r3
 80004a4:	2310      	movs	r3, #16
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f002 fb97 	bl	8002bdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ae:	2320      	movs	r3, #32
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	0018      	movs	r0, r3
 80004b4:	2308      	movs	r3, #8
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f002 fb8f 	bl	8002bdc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	0018      	movs	r0, r3
 80004c2:	231c      	movs	r3, #28
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f002 fb88 	bl	8002bdc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004cc:	4b2f      	ldr	r3, [pc, #188]	; (800058c <MX_TIM3_Init+0xf4>)
 80004ce:	4a30      	ldr	r2, [pc, #192]	; (8000590 <MX_TIM3_Init+0xf8>)
 80004d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 937;
 80004d2:	4b2e      	ldr	r3, [pc, #184]	; (800058c <MX_TIM3_Init+0xf4>)
 80004d4:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <MX_TIM3_Init+0xfc>)
 80004d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d8:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_TIM3_Init+0xf4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <MX_TIM3_Init+0xf4>)
 80004e0:	4a2d      	ldr	r2, [pc, #180]	; (8000598 <MX_TIM3_Init+0x100>)
 80004e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e4:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_TIM3_Init+0xf4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_TIM3_Init+0xf4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004f0:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_TIM3_Init+0xf4>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 f97c 	bl	80017f0 <HAL_TIM_Base_Init>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004fc:	f000 f90c 	bl	8000718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000500:	2128      	movs	r1, #40	; 0x28
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	0152      	lsls	r2, r2, #5
 8000508:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800050a:	187a      	adds	r2, r7, r1
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_TIM3_Init+0xf4>)
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f001 fbc7 	bl	8001ca4 <HAL_TIM_ConfigClockSource>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800051a:	f000 f8fd 	bl	8000718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_TIM3_Init+0xf4>)
 8000520:	0018      	movs	r0, r3
 8000522:	f001 f9f9 	bl	8001918 <HAL_TIM_PWM_Init>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800052a:	f000 f8f5 	bl	8000718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052e:	2120      	movs	r1, #32
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800053c:	187a      	adds	r2, r7, r1
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_TIM3_Init+0xf4>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f001 ffa8 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800054c:	f000 f8e4 	bl	8000718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2260      	movs	r2, #96	; 0x60
 8000554:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <MX_TIM3_Init+0xf4>)
 800056c:	2200      	movs	r2, #0
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fadc 	bl	8001b2c <HAL_TIM_PWM_ConfigChannel>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000578:	f000 f8ce 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <MX_TIM3_Init+0xf4>)
 800057e:	0018      	movs	r0, r3
 8000580:	f000 f928 	bl	80007d4 <HAL_TIM_MspPostInit>

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b00e      	add	sp, #56	; 0x38
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000030 	.word	0x20000030
 8000590:	40000400 	.word	0x40000400
 8000594:	000003a9 	.word	0x000003a9
 8000598:	000003ff 	.word	0x000003ff

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <MX_USART2_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005a8:	2296      	movs	r2, #150	; 0x96
 80005aa:	0212      	lsls	r2, r2, #8
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x58>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 ffb1 	bl	8002548 <HAL_UART_Init>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f895 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000c0 	.word	0x200000c0
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b08b      	sub	sp, #44	; 0x2c
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	2414      	movs	r4, #20
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2314      	movs	r3, #20
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f002 fae5 	bl	8002bdc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b3e      	ldr	r3, [pc, #248]	; (800070c <MX_GPIO_Init+0x110>)
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	4b3d      	ldr	r3, [pc, #244]	; (800070c <MX_GPIO_Init+0x110>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0309      	lsls	r1, r1, #12
 800061c:	430a      	orrs	r2, r1
 800061e:	615a      	str	r2, [r3, #20]
 8000620:	4b3a      	ldr	r3, [pc, #232]	; (800070c <MX_GPIO_Init+0x110>)
 8000622:	695a      	ldr	r2, [r3, #20]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	031b      	lsls	r3, r3, #12
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	4b37      	ldr	r3, [pc, #220]	; (800070c <MX_GPIO_Init+0x110>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <MX_GPIO_Init+0x110>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	03c9      	lsls	r1, r1, #15
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b33      	ldr	r3, [pc, #204]	; (800070c <MX_GPIO_Init+0x110>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	03db      	lsls	r3, r3, #15
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <MX_GPIO_Init+0x110>)
 800064c:	695a      	ldr	r2, [r3, #20]
 800064e:	4b2f      	ldr	r3, [pc, #188]	; (800070c <MX_GPIO_Init+0x110>)
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	0289      	lsls	r1, r1, #10
 8000654:	430a      	orrs	r2, r1
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <MX_GPIO_Init+0x110>)
 800065a:	695a      	ldr	r2, [r3, #20]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	029b      	lsls	r3, r3, #10
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_GPIO_Init+0x110>)
 8000668:	695a      	ldr	r2, [r3, #20]
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <MX_GPIO_Init+0x110>)
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	02c9      	lsls	r1, r1, #11
 8000670:	430a      	orrs	r2, r1
 8000672:	615a      	str	r2, [r3, #20]
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_GPIO_Init+0x110>)
 8000676:	695a      	ldr	r2, [r3, #20]
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	02db      	lsls	r3, r3, #11
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000682:	2390      	movs	r3, #144	; 0x90
 8000684:	0059      	lsls	r1, r3, #1
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2200      	movs	r2, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fc1f 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	0192      	lsls	r2, r2, #6
 8000698:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <MX_GPIO_Init+0x114>)
 800069e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <MX_GPIO_Init+0x118>)
 80006aa:	0019      	movs	r1, r3
 80006ac:	0010      	movs	r0, r2
 80006ae:	f000 fa9f 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2290      	movs	r2, #144	; 0x90
 80006b8:	0052      	lsls	r2, r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	000c      	movs	r4, r1
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2201      	movs	r2, #1
 80006c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	193a      	adds	r2, r7, r4
 80006d2:	2390      	movs	r3, #144	; 0x90
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	0011      	movs	r1, r2
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fa89 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006de:	0021      	movs	r1, r4
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	187a      	adds	r2, r7, r1
 80006f6:	2390      	movs	r3, #144	; 0x90
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fa77 	bl	8000bf0 <HAL_GPIO_Init>

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b00b      	add	sp, #44	; 0x2c
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40021000 	.word	0x40021000
 8000710:	10210000 	.word	0x10210000
 8000714:	48000800 	.word	0x48000800

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x44>)
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_MspInit+0x44>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	619a      	str	r2, [r3, #24]
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_MspInit+0x44>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x44>)
 8000744:	69da      	ldr	r2, [r3, #28]
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x44>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0549      	lsls	r1, r1, #21
 800074c:	430a      	orrs	r2, r1
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_MspInit+0x44>)
 8000752:	69da      	ldr	r2, [r3, #28]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	4013      	ands	r3, r2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <HAL_TIM_Base_MspInit+0x5c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d10e      	bne.n	800079c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <HAL_TIM_Base_MspInit+0x60>)
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_TIM_Base_MspInit+0x60>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0109      	lsls	r1, r1, #4
 8000788:	430a      	orrs	r2, r1
 800078a:	619a      	str	r2, [r3, #24]
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_TIM_Base_MspInit+0x60>)
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800079a:	e010      	b.n	80007be <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <HAL_TIM_Base_MspInit+0x64>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d10b      	bne.n	80007be <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_TIM_Base_MspInit+0x60>)
 80007a8:	69da      	ldr	r2, [r3, #28]
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_TIM_Base_MspInit+0x60>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	61da      	str	r2, [r3, #28]
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_TIM_Base_MspInit+0x60>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b004      	add	sp, #16
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40000400 	.word	0x40000400

080007d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	240c      	movs	r4, #12
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	0018      	movs	r0, r3
 80007e2:	2314      	movs	r3, #20
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f002 f9f8 	bl	8002bdc <memset>
  if(htim->Instance==TIM3)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a15      	ldr	r2, [pc, #84]	; (8000848 <HAL_TIM_MspPostInit+0x74>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d123      	bne.n	800083e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_TIM_MspPostInit+0x78>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_TIM_MspPostInit+0x78>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	02c9      	lsls	r1, r1, #11
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_TIM_MspPostInit+0x78>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	02db      	lsls	r3, r3, #11
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2210      	movs	r2, #16
 8000818:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2202      	movs	r2, #2
 800081e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2201      	movs	r2, #1
 8000830:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	187b      	adds	r3, r7, r1
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_TIM_MspPostInit+0x7c>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f000 f9d9 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b009      	add	sp, #36	; 0x24
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40000400 	.word	0x40000400
 800084c:	40021000 	.word	0x40021000
 8000850:	48000400 	.word	0x48000400

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	2414      	movs	r4, #20
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	2314      	movs	r3, #20
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f002 f9b8 	bl	8002bdc <memset>
  if(huart->Instance==USART2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <HAL_UART_MspInit+0x90>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d132      	bne.n	80008dc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_UART_MspInit+0x94>)
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0x94>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0289      	lsls	r1, r1, #10
 8000880:	430a      	orrs	r2, r1
 8000882:	61da      	str	r2, [r3, #28]
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0x94>)
 8000886:	69da      	ldr	r2, [r3, #28]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	029b      	lsls	r3, r3, #10
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0x94>)
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0x94>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0289      	lsls	r1, r1, #10
 800089c:	430a      	orrs	r2, r1
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_UART_MspInit+0x94>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	029b      	lsls	r3, r3, #10
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	220c      	movs	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2202      	movs	r2, #2
 80008ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2203      	movs	r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2201      	movs	r2, #1
 80008cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	2390      	movs	r3, #144	; 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 f98a 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b00b      	add	sp, #44	; 0x2c
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f87a 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490e      	ldr	r1, [pc, #56]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0b      	ldr	r4, [pc, #44]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800094e:	f7ff ffe4 	bl	800091a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000952:	f002 f91f 	bl	8002b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fca9 	bl	80002ac <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000968:	08002c44 	.word	0x08002c44
  ldr r2, =_sbss
 800096c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000970:	20000148 	.word	0x20000148

08000974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_IRQHandler>
	...

08000978 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_Init+0x24>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_Init+0x24>)
 8000982:	2110      	movs	r1, #16
 8000984:	430a      	orrs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000988:	2000      	movs	r0, #0
 800098a:	f000 f809 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098e:	f7ff fec9 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40022000 	.word	0x40022000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_InitTick+0x5c>)
 80009aa:	681c      	ldr	r4, [r3, #0]
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x60>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	0019      	movs	r1, r3
 80009b2:	23fa      	movs	r3, #250	; 0xfa
 80009b4:	0098      	lsls	r0, r3, #2
 80009b6:	f7ff fba7 	bl	8000108 <__udivsi3>
 80009ba:	0003      	movs	r3, r0
 80009bc:	0019      	movs	r1, r3
 80009be:	0020      	movs	r0, r4
 80009c0:	f7ff fba2 	bl	8000108 <__udivsi3>
 80009c4:	0003      	movs	r3, r0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 f905 	bl	8000bd6 <HAL_SYSTICK_Config>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e00f      	b.n	80009f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d80b      	bhi.n	80009f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	2301      	movs	r3, #1
 80009de:	425b      	negs	r3, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f8e2 	bl	8000bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_InitTick+0x64>)
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b003      	add	sp, #12
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	18d2      	adds	r2, r2, r3
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000144 	.word	0x20000144

08000a2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000144 	.word	0x20000144

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff fff0 	bl	8000a2c <HAL_GetTick>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	001a      	movs	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	189b      	adds	r3, r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	f7ff ffe0 	bl	8000a2c <HAL_GetTick>
 8000a6c:	0002      	movs	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9c:	d828      	bhi.n	8000af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	33c0      	adds	r3, #192	; 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	589b      	ldr	r3, [r3, r2]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	; 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aee:	e031      	b.n	8000b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0019      	movs	r1, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	400b      	ands	r3, r1
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3306      	adds	r3, #6
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001c      	movs	r4, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	18c3      	adds	r3, r0, r3
 8000b50:	3304      	adds	r3, #4
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	045b      	lsls	r3, r3, #17
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d301      	bcc.n	8000b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e010      	b.n	8000b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <SysTick_Config+0x44>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	3a01      	subs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff7c 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x44>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ffbf 	bl	8000b64 <SysTick_Config>
 8000be6:	0003      	movs	r3, r0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfe:	e14f      	b.n	8000ea0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x28>
 8000c16:	e140      	b.n	8000e9a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d00b      	beq.n	8000c38 <HAL_GPIO_Init+0x48>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c2c:	2b11      	cmp	r3, #17
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b12      	cmp	r3, #18
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	43da      	mvns	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	2201      	movs	r2, #1
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0xea>
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b12      	cmp	r3, #18
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	58d3      	ldr	r3, [r2, r3]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2207      	movs	r2, #7
 8000cec:	4013      	ands	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2107      	movs	r1, #7
 8000d06:	400b      	ands	r3, r1
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	6939      	ldr	r1, [r7, #16]
 8000d20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	401a      	ands	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	055b      	lsls	r3, r3, #21
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d100      	bne.n	8000d64 <HAL_GPIO_Init+0x174>
 8000d62:	e09a      	b.n	8000e9a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d66:	699a      	ldr	r2, [r3, #24]
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	2201      	movs	r2, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	589b      	ldr	r3, [r3, r2]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4013      	ands	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	409a      	lsls	r2, r3
 8000d96:	0013      	movs	r3, r2
 8000d98:	43da      	mvns	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	2390      	movs	r3, #144	; 0x90
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1e2>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a44      	ldr	r2, [pc, #272]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1de>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a43      	ldr	r2, [pc, #268]	; (8000ec4 <HAL_GPIO_Init+0x2d4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1da>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	400a      	ands	r2, r1
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	035b      	lsls	r3, r3, #13
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	039b      	lsls	r3, r3, #14
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_GPIO_Init+0x2dc>)
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	40da      	lsrs	r2, r3
 8000ea8:	1e13      	subs	r3, r2, #0
 8000eaa:	d000      	beq.n	8000eae <HAL_GPIO_Init+0x2be>
 8000eac:	e6a8      	b.n	8000c00 <HAL_GPIO_Init+0x10>
  } 
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b006      	add	sp, #24
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	48000400 	.word	0x48000400
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000c00 	.word	0x48000c00
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	0008      	movs	r0, r1
 8000eda:	0011      	movs	r1, r2
 8000edc:	1cbb      	adds	r3, r7, #2
 8000ede:	1c02      	adds	r2, r0, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	1c7b      	adds	r3, r7, #1
 8000ee4:	1c0a      	adds	r2, r1, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee8:	1c7b      	adds	r3, r7, #1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef0:	1cbb      	adds	r3, r7, #2
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef8:	e003      	b.n	8000f02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	1cbb      	adds	r3, r7, #2
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e305      	b.n	800152a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	d100      	bne.n	8000f2a <HAL_RCC_OscConfig+0x1e>
 8000f28:	e08d      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2a:	4bc5      	ldr	r3, [pc, #788]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d00e      	beq.n	8000f54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f36:	4bc2      	ldr	r3, [pc, #776]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x64>
 8000f42:	4bbf      	ldr	r3, [pc, #764]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	025b      	lsls	r3, r3, #9
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d10d      	bne.n	8000f70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	4bba      	ldr	r3, [pc, #744]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d100      	bne.n	8000f62 <HAL_RCC_OscConfig+0x56>
 8000f60:	e070      	b.n	8001044 <HAL_RCC_OscConfig+0x138>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d000      	beq.n	8000f6c <HAL_RCC_OscConfig+0x60>
 8000f6a:	e06b      	b.n	8001044 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e2dc      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d107      	bne.n	8000f88 <HAL_RCC_OscConfig+0x7c>
 8000f78:	4bb1      	ldr	r3, [pc, #708]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4bb0      	ldr	r3, [pc, #704]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	0249      	lsls	r1, r1, #9
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e02f      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10c      	bne.n	8000faa <HAL_RCC_OscConfig+0x9e>
 8000f90:	4bab      	ldr	r3, [pc, #684]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4baa      	ldr	r3, [pc, #680]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f96:	49ab      	ldr	r1, [pc, #684]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 8000f98:	400a      	ands	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	4ba8      	ldr	r3, [pc, #672]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4ba7      	ldr	r3, [pc, #668]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fa2:	49a9      	ldr	r1, [pc, #676]	; (8001248 <HAL_RCC_OscConfig+0x33c>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e01e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d10e      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xc4>
 8000fb2:	4ba3      	ldr	r3, [pc, #652]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4ba2      	ldr	r3, [pc, #648]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	02c9      	lsls	r1, r1, #11
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	4b9f      	ldr	r3, [pc, #636]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b9e      	ldr	r3, [pc, #632]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0249      	lsls	r1, r1, #9
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xdc>
 8000fd0:	4b9b      	ldr	r3, [pc, #620]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b9a      	ldr	r3, [pc, #616]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fd6:	499b      	ldr	r1, [pc, #620]	; (8001244 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	400a      	ands	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	4b98      	ldr	r3, [pc, #608]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b97      	ldr	r3, [pc, #604]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8000fe2:	4999      	ldr	r1, [pc, #612]	; (8001248 <HAL_RCC_OscConfig+0x33c>)
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d014      	beq.n	800101a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fd1c 	bl	8000a2c <HAL_GetTick>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fd17 	bl	8000a2c <HAL_GetTick>
 8000ffe:	0002      	movs	r2, r0
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b64      	cmp	r3, #100	; 0x64
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e28e      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100c:	4b8c      	ldr	r3, [pc, #560]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0xee>
 8001018:	e015      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fd07 	bl	8000a2c <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fd02 	bl	8000a2c <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e279      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b82      	ldr	r3, [pc, #520]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x118>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x146>
 8001050:	e06c      	b.n	800112c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001052:	4b7b      	ldr	r3, [pc, #492]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	220c      	movs	r2, #12
 8001058:	4013      	ands	r3, r2
 800105a:	d00e      	beq.n	800107a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800105c:	4b78      	ldr	r3, [pc, #480]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	220c      	movs	r2, #12
 8001062:	4013      	ands	r3, r2
 8001064:	2b08      	cmp	r3, #8
 8001066:	d11f      	bne.n	80010a8 <HAL_RCC_OscConfig+0x19c>
 8001068:	4b75      	ldr	r3, [pc, #468]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	401a      	ands	r2, r3
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	429a      	cmp	r2, r3
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b71      	ldr	r3, [pc, #452]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2202      	movs	r2, #2
 8001080:	4013      	ands	r3, r2
 8001082:	d005      	beq.n	8001090 <HAL_RCC_OscConfig+0x184>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d001      	beq.n	8001090 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e24c      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	22f8      	movs	r2, #248	; 0xf8
 8001096:	4393      	bics	r3, r2
 8001098:	0019      	movs	r1, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	00da      	lsls	r2, r3, #3
 80010a0:	4b67      	ldr	r3, [pc, #412]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e041      	b.n	800112c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d024      	beq.n	80010fa <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b63      	ldr	r3, [pc, #396]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b62      	ldr	r3, [pc, #392]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fcb6 	bl	8000a2c <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fcb1 	bl	8000a2c <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e228      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2202      	movs	r2, #2
 80010de:	4013      	ands	r3, r2
 80010e0:	d0f1      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	22f8      	movs	r2, #248	; 0xf8
 80010e8:	4393      	bics	r3, r2
 80010ea:	0019      	movs	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	00da      	lsls	r2, r3, #3
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e018      	b.n	800112c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fa:	4b51      	ldr	r3, [pc, #324]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b50      	ldr	r3, [pc, #320]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001100:	2101      	movs	r1, #1
 8001102:	438a      	bics	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc91 	bl	8000a2c <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fc8c 	bl	8000a2c <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e203      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	4b47      	ldr	r3, [pc, #284]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d1f1      	bne.n	8001110 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2208      	movs	r2, #8
 8001132:	4013      	ands	r3, r2
 8001134:	d036      	beq.n	80011a4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d019      	beq.n	8001172 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113e:	4b40      	ldr	r3, [pc, #256]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001142:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001144:	2101      	movs	r1, #1
 8001146:	430a      	orrs	r2, r1
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff fc6f 	bl	8000a2c <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fc6a 	bl	8000a2c <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1e1      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d0f1      	beq.n	8001154 <HAL_RCC_OscConfig+0x248>
 8001170:	e018      	b.n	80011a4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001178:	2101      	movs	r1, #1
 800117a:	438a      	bics	r2, r1
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fc55 	bl	8000a2c <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc50 	bl	8000a2c <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1c7      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	d1f1      	bne.n	8001188 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2204      	movs	r2, #4
 80011aa:	4013      	ands	r3, r2
 80011ac:	d100      	bne.n	80011b0 <HAL_RCC_OscConfig+0x2a4>
 80011ae:	e0b5      	b.n	800131c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b0:	201f      	movs	r0, #31
 80011b2:	183b      	adds	r3, r7, r0
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011ba:	69da      	ldr	r2, [r3, #28]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	055b      	lsls	r3, r3, #21
 80011c0:	4013      	ands	r3, r2
 80011c2:	d110      	bne.n	80011e6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	0549      	lsls	r1, r1, #21
 80011ce:	430a      	orrs	r2, r1
 80011d0:	61da      	str	r2, [r3, #28]
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	055b      	lsls	r3, r3, #21
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_OscConfig+0x340>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	d11a      	bne.n	8001228 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_RCC_OscConfig+0x340>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_RCC_OscConfig+0x340>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0049      	lsls	r1, r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001200:	f7ff fc14 	bl	8000a2c <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120a:	f7ff fc0f 	bl	8000a2c <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e186      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_OscConfig+0x340>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4013      	ands	r3, r2
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10f      	bne.n	8001250 <HAL_RCC_OscConfig+0x344>
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_RCC_OscConfig+0x334>)
 8001236:	2101      	movs	r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	621a      	str	r2, [r3, #32]
 800123c:	e036      	b.n	80012ac <HAL_RCC_OscConfig+0x3a0>
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	40021000 	.word	0x40021000
 8001244:	fffeffff 	.word	0xfffeffff
 8001248:	fffbffff 	.word	0xfffbffff
 800124c:	40007000 	.word	0x40007000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10c      	bne.n	8001272 <HAL_RCC_OscConfig+0x366>
 8001258:	4bb6      	ldr	r3, [pc, #728]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	4bb5      	ldr	r3, [pc, #724]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800125e:	2101      	movs	r1, #1
 8001260:	438a      	bics	r2, r1
 8001262:	621a      	str	r2, [r3, #32]
 8001264:	4bb3      	ldr	r3, [pc, #716]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4bb2      	ldr	r3, [pc, #712]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800126a:	2104      	movs	r1, #4
 800126c:	438a      	bics	r2, r1
 800126e:	621a      	str	r2, [r3, #32]
 8001270:	e01c      	b.n	80012ac <HAL_RCC_OscConfig+0x3a0>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x388>
 800127a:	4bae      	ldr	r3, [pc, #696]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	4bad      	ldr	r3, [pc, #692]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001280:	2104      	movs	r1, #4
 8001282:	430a      	orrs	r2, r1
 8001284:	621a      	str	r2, [r3, #32]
 8001286:	4bab      	ldr	r3, [pc, #684]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001288:	6a1a      	ldr	r2, [r3, #32]
 800128a:	4baa      	ldr	r3, [pc, #680]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	621a      	str	r2, [r3, #32]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0x3a0>
 8001294:	4ba7      	ldr	r3, [pc, #668]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001296:	6a1a      	ldr	r2, [r3, #32]
 8001298:	4ba6      	ldr	r3, [pc, #664]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800129a:	2101      	movs	r1, #1
 800129c:	438a      	bics	r2, r1
 800129e:	621a      	str	r2, [r3, #32]
 80012a0:	4ba4      	ldr	r3, [pc, #656]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	4ba3      	ldr	r3, [pc, #652]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012a6:	2104      	movs	r1, #4
 80012a8:	438a      	bics	r2, r1
 80012aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d014      	beq.n	80012de <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fbba 	bl	8000a2c <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012bc:	e009      	b.n	80012d2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fbb5 	bl	8000a2c <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4a9b      	ldr	r2, [pc, #620]	; (8001538 <HAL_RCC_OscConfig+0x62c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e12b      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d2:	4b98      	ldr	r3, [pc, #608]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x3b2>
 80012dc:	e013      	b.n	8001306 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff fba5 	bl	8000a2c <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e6:	e009      	b.n	80012fc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fba0 	bl	8000a2c <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4a91      	ldr	r2, [pc, #580]	; (8001538 <HAL_RCC_OscConfig+0x62c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e116      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	4b8d      	ldr	r3, [pc, #564]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	2202      	movs	r2, #2
 8001302:	4013      	ands	r3, r2
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001306:	231f      	movs	r3, #31
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001312:	69da      	ldr	r2, [r3, #28]
 8001314:	4b87      	ldr	r3, [pc, #540]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001316:	4989      	ldr	r1, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x630>)
 8001318:	400a      	ands	r2, r1
 800131a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2210      	movs	r2, #16
 8001322:	4013      	ands	r3, r2
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d12a      	bne.n	8001384 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800132e:	4b81      	ldr	r3, [pc, #516]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001332:	4b80      	ldr	r3, [pc, #512]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001334:	2104      	movs	r1, #4
 8001336:	430a      	orrs	r2, r1
 8001338:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800133a:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800133c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133e:	4b7d      	ldr	r3, [pc, #500]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001340:	2101      	movs	r1, #1
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001346:	f7ff fb71 	bl	8000a2c <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001350:	f7ff fb6c 	bl	8000a2c <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e0e3      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	d0f1      	beq.n	8001350 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800136c:	4b71      	ldr	r3, [pc, #452]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	22f8      	movs	r2, #248	; 0xf8
 8001372:	4393      	bics	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	00da      	lsls	r2, r3, #3
 800137c:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800137e:	430a      	orrs	r2, r1
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
 8001382:	e034      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	3305      	adds	r3, #5
 800138a:	d111      	bne.n	80013b0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800138e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001390:	4b68      	ldr	r3, [pc, #416]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001392:	2104      	movs	r1, #4
 8001394:	438a      	bics	r2, r1
 8001396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800139a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139c:	22f8      	movs	r2, #248	; 0xf8
 800139e:	4393      	bics	r3, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	00da      	lsls	r2, r3, #3
 80013a8:	4b62      	ldr	r3, [pc, #392]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
 80013ae:	e01e      	b.n	80013ee <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013b0:	4b60      	ldr	r3, [pc, #384]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b4:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013b6:	2104      	movs	r1, #4
 80013b8:	430a      	orrs	r2, r1
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013bc:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c0:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	438a      	bics	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fb30 	bl	8000a2c <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013d2:	f7ff fb2b 	bl	8000a2c <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0a2      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	2202      	movs	r2, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d1f1      	bne.n	80013d2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d100      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4ec>
 80013f6:	e097      	b.n	8001528 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	220c      	movs	r2, #12
 80013fe:	4013      	ands	r3, r2
 8001400:	2b08      	cmp	r3, #8
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x4fa>
 8001404:	e06b      	b.n	80014de <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d14c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b48      	ldr	r3, [pc, #288]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001414:	494a      	ldr	r1, [pc, #296]	; (8001540 <HAL_RCC_OscConfig+0x634>)
 8001416:	400a      	ands	r2, r1
 8001418:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb07 	bl	8000a2c <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff fb02 	bl	8000a2c <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e079      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	049b      	lsls	r3, r3, #18
 800143e:	4013      	ands	r3, r2
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	220f      	movs	r2, #15
 8001448:	4393      	bics	r3, r2
 800144a:	0019      	movs	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001452:	430a      	orrs	r2, r1
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a3a      	ldr	r2, [pc, #232]	; (8001544 <HAL_RCC_OscConfig+0x638>)
 800145c:	4013      	ands	r3, r2
 800145e:	0019      	movs	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	431a      	orrs	r2, r3
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0449      	lsls	r1, r1, #17
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fad5 	bl	8000a2c <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fad0 	bl	8000a2c <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e047      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	049b      	lsls	r3, r3, #18
 80014a2:	4013      	ands	r3, r2
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x57c>
 80014a6:	e03f      	b.n	8001528 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014ae:	4924      	ldr	r1, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x634>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff faba 	bl	8000a2c <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fab5 	bl	8000a2c <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e02c      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	049b      	lsls	r3, r3, #18
 80014d8:	4013      	ands	r3, r2
 80014da:	d1f0      	bne.n	80014be <HAL_RCC_OscConfig+0x5b2>
 80014dc:	e024      	b.n	8001528 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e01f      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	23c0      	movs	r3, #192	; 0xc0
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	429a      	cmp	r2, r3
 8001504:	d10e      	bne.n	8001524 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	220f      	movs	r2, #15
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	23f0      	movs	r3, #240	; 0xf0
 8001518:	039b      	lsls	r3, r3, #14
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b008      	add	sp, #32
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40021000 	.word	0x40021000
 8001538:	00001388 	.word	0x00001388
 800153c:	efffffff 	.word	0xefffffff
 8001540:	feffffff 	.word	0xfeffffff
 8001544:	ffc27fff 	.word	0xffc27fff

08001548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b3      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2201      	movs	r2, #1
 8001562:	4013      	ands	r3, r2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d911      	bls.n	800158e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	4393      	bics	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	4013      	ands	r3, r2
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e09a      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d015      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2204      	movs	r2, #4
 800159e:	4013      	ands	r3, r2
 80015a0:	d006      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015a8:	21e0      	movs	r1, #224	; 0xe0
 80015aa:	00c9      	lsls	r1, r1, #3
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	22f0      	movs	r2, #240	; 0xf0
 80015b6:	4393      	bics	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d040      	beq.n	8001650 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d114      	bne.n	800160c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06e      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	049b      	lsls	r3, r3, #18
 80015f6:	4013      	ands	r3, r2
 80015f8:	d108      	bne.n	800160c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e062      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e05b      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	4393      	bics	r3, r2
 8001614:	0019      	movs	r1, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800161c:	430a      	orrs	r2, r1
 800161e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff fa04 	bl	8000a2c <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001628:	e009      	b.n	800163e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162a:	f7ff f9ff 	bl	8000a2c <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_RCC_ClockConfig+0x18c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e042      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	220c      	movs	r2, #12
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1ec      	bne.n	800162a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d211      	bcs.n	8001682 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x184>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e020      	b.n	80016c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2204      	movs	r2, #4
 8001688:	4013      	ands	r3, r2
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_RCC_ClockConfig+0x190>)
 8001692:	4013      	ands	r3, r2
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016a0:	f000 f820 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80016a4:	0001      	movs	r1, r0
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x188>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	220f      	movs	r2, #15
 80016ae:	4013      	ands	r3, r2
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x194>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	000a      	movs	r2, r1
 80016b6:	40da      	lsrs	r2, r3
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x198>)
 80016ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff f96f 	bl	80009a0 <HAL_InitTick>
  
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b004      	add	sp, #16
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	00001388 	.word	0x00001388
 80016d8:	fffff8ff 	.word	0xfffff8ff
 80016dc:	08002c24 	.word	0x08002c24
 80016e0:	20000000 	.word	0x20000000

080016e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b08f      	sub	sp, #60	; 0x3c
 80016e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016ea:	2314      	movs	r3, #20
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016f2:	c313      	stmia	r3!, {r0, r1, r4}
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	220c      	movs	r2, #12
 8001722:	4013      	ands	r3, r2
 8001724:	2b04      	cmp	r3, #4
 8001726:	d002      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x4a>
 8001728:	2b08      	cmp	r3, #8
 800172a:	d003      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x50>
 800172c:	e02f      	b.n	800178e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001732:	e02f      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	220f      	movs	r2, #15
 800173a:	4013      	ands	r3, r2
 800173c:	2214      	movs	r2, #20
 800173e:	18ba      	adds	r2, r7, r2
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	220f      	movs	r2, #15
 800174a:	4013      	ands	r3, r2
 800174c:	1d3a      	adds	r2, r7, #4
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001754:	23c0      	movs	r3, #192	; 0xc0
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	401a      	ands	r2, r3
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	429a      	cmp	r2, r3
 8001760:	d109      	bne.n	8001776 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001764:	4811      	ldr	r0, [pc, #68]	; (80017ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001766:	f7fe fccf 	bl	8000108 <__udivsi3>
 800176a:	0003      	movs	r3, r0
 800176c:	001a      	movs	r2, r3
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	4353      	muls	r3, r2
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
 8001774:	e008      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800177a:	f7fe fcc5 	bl	8000108 <__udivsi3>
 800177e:	0003      	movs	r3, r0
 8001780:	001a      	movs	r2, r3
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	4353      	muls	r3, r2
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800178c:	e002      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001792:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b00f      	add	sp, #60	; 0x3c
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	08002c04 	.word	0x08002c04
 80017a4:	08002c14 	.word	0x08002c14
 80017a8:	40021000 	.word	0x40021000
 80017ac:	007a1200 	.word	0x007a1200

080017b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017c8:	f7ff fff2 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017cc:	0001      	movs	r1, r0
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	40d9      	lsrs	r1, r3
 80017de:	000b      	movs	r3, r1
}    
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	40021000 	.word	0x40021000
 80017ec:	08002c34 	.word	0x08002c34

080017f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e042      	b.n	8001888 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	223d      	movs	r2, #61	; 0x3d
 8001806:	5c9b      	ldrb	r3, [r3, r2]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	223c      	movs	r2, #60	; 0x3c
 8001812:	2100      	movs	r1, #0
 8001814:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	0018      	movs	r0, r3
 800181a:	f7fe ffa7 	bl	800076c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	223d      	movs	r2, #61	; 0x3d
 8001822:	2102      	movs	r1, #2
 8001824:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	0019      	movs	r1, r3
 8001830:	0010      	movs	r0, r2
 8001832:	f000 fb01 	bl	8001e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2246      	movs	r2, #70	; 0x46
 800183a:	2101      	movs	r1, #1
 800183c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	223e      	movs	r2, #62	; 0x3e
 8001842:	2101      	movs	r1, #1
 8001844:	5499      	strb	r1, [r3, r2]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	223f      	movs	r2, #63	; 0x3f
 800184a:	2101      	movs	r1, #1
 800184c:	5499      	strb	r1, [r3, r2]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2240      	movs	r2, #64	; 0x40
 8001852:	2101      	movs	r1, #1
 8001854:	5499      	strb	r1, [r3, r2]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2241      	movs	r2, #65	; 0x41
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2242      	movs	r2, #66	; 0x42
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2243      	movs	r2, #67	; 0x43
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2244      	movs	r2, #68	; 0x44
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2245      	movs	r2, #69	; 0x45
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	223d      	movs	r2, #61	; 0x3d
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	223d      	movs	r2, #61	; 0x3d
 800189c:	5c9b      	ldrb	r3, [r3, r2]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d001      	beq.n	80018a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e02d      	b.n	8001904 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	223d      	movs	r2, #61	; 0x3d
 80018ac:	2102      	movs	r1, #2
 80018ae:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a15      	ldr	r2, [pc, #84]	; (800190c <HAL_TIM_Base_Start+0x7c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d009      	beq.n	80018ce <HAL_TIM_Base_Start+0x3e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_TIM_Base_Start+0x80>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d004      	beq.n	80018ce <HAL_TIM_Base_Start+0x3e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_TIM_Base_Start+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d111      	bne.n	80018f2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2207      	movs	r2, #7
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d010      	beq.n	8001902 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f0:	e007      	b.n	8001902 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b004      	add	sp, #16
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40012c00 	.word	0x40012c00
 8001910:	40000400 	.word	0x40000400
 8001914:	40014000 	.word	0x40014000

08001918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e042      	b.n	80019b0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	223d      	movs	r2, #61	; 0x3d
 800192e:	5c9b      	ldrb	r3, [r3, r2]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d107      	bne.n	8001946 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	223c      	movs	r2, #60	; 0x3c
 800193a:	2100      	movs	r1, #0
 800193c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	0018      	movs	r0, r3
 8001942:	f000 f839 	bl	80019b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	223d      	movs	r2, #61	; 0x3d
 800194a:	2102      	movs	r1, #2
 800194c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	0019      	movs	r1, r3
 8001958:	0010      	movs	r0, r2
 800195a:	f000 fa6d 	bl	8001e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2246      	movs	r2, #70	; 0x46
 8001962:	2101      	movs	r1, #1
 8001964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	223e      	movs	r2, #62	; 0x3e
 800196a:	2101      	movs	r1, #1
 800196c:	5499      	strb	r1, [r3, r2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	223f      	movs	r2, #63	; 0x3f
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2241      	movs	r2, #65	; 0x41
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2242      	movs	r2, #66	; 0x42
 800198a:	2101      	movs	r1, #1
 800198c:	5499      	strb	r1, [r3, r2]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2243      	movs	r2, #67	; 0x43
 8001992:	2101      	movs	r1, #1
 8001994:	5499      	strb	r1, [r3, r2]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2244      	movs	r2, #68	; 0x44
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2245      	movs	r2, #69	; 0x45
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	223d      	movs	r2, #61	; 0x3d
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <HAL_TIM_PWM_Start+0x22>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	223e      	movs	r2, #62	; 0x3e
 80019dc:	5c9b      	ldrb	r3, [r3, r2]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	4193      	sbcs	r3, r2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	e01f      	b.n	8001a2a <HAL_TIM_PWM_Start+0x62>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d108      	bne.n	8001a02 <HAL_TIM_PWM_Start+0x3a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	223f      	movs	r2, #63	; 0x3f
 80019f4:	5c9b      	ldrb	r3, [r3, r2]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	4193      	sbcs	r3, r2
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	e013      	b.n	8001a2a <HAL_TIM_PWM_Start+0x62>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d108      	bne.n	8001a1a <HAL_TIM_PWM_Start+0x52>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	5c9b      	ldrb	r3, [r3, r2]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	4193      	sbcs	r3, r2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	e007      	b.n	8001a2a <HAL_TIM_PWM_Start+0x62>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2241      	movs	r2, #65	; 0x41
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	1e5a      	subs	r2, r3, #1
 8001a26:	4193      	sbcs	r3, r2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06e      	b.n	8001b10 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <HAL_TIM_PWM_Start+0x7a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	223e      	movs	r2, #62	; 0x3e
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	5499      	strb	r1, [r3, r2]
 8001a40:	e013      	b.n	8001a6a <HAL_TIM_PWM_Start+0xa2>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d104      	bne.n	8001a52 <HAL_TIM_PWM_Start+0x8a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	223f      	movs	r2, #63	; 0x3f
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	5499      	strb	r1, [r3, r2]
 8001a50:	e00b      	b.n	8001a6a <HAL_TIM_PWM_Start+0xa2>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d104      	bne.n	8001a62 <HAL_TIM_PWM_Start+0x9a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2240      	movs	r2, #64	; 0x40
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	5499      	strb	r1, [r3, r2]
 8001a60:	e003      	b.n	8001a6a <HAL_TIM_PWM_Start+0xa2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	2102      	movs	r1, #2
 8001a68:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6839      	ldr	r1, [r7, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fcec 	bl	8002450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a26      	ldr	r2, [pc, #152]	; (8001b18 <HAL_TIM_PWM_Start+0x150>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_TIM_PWM_Start+0xd8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a25      	ldr	r2, [pc, #148]	; (8001b1c <HAL_TIM_PWM_Start+0x154>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_TIM_PWM_Start+0xd8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_TIM_PWM_Start+0x158>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_TIM_PWM_Start+0xd8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_TIM_PWM_Start+0x15c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_TIM_PWM_Start+0xdc>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_TIM_PWM_Start+0xde>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	0209      	lsls	r1, r1, #8
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_TIM_PWM_Start+0x150>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d009      	beq.n	8001ada <HAL_TIM_PWM_Start+0x112>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_TIM_PWM_Start+0x160>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d004      	beq.n	8001ada <HAL_TIM_PWM_Start+0x112>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_TIM_PWM_Start+0x154>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d111      	bne.n	8001afe <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d010      	beq.n	8001b0e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afc:	e007      	b.n	8001b0e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40012c00 	.word	0x40012c00
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	40014400 	.word	0x40014400
 8001b24:	40014800 	.word	0x40014800
 8001b28:	40000400 	.word	0x40000400

08001b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	223c      	movs	r2, #60	; 0x3c
 8001b3c:	5c9b      	ldrb	r3, [r3, r2]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e0a7      	b.n	8001c96 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	223c      	movs	r2, #60	; 0x3c
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	d100      	bne.n	8001b56 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001b54:	e076      	b.n	8001c44 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0c      	cmp	r3, #12
 8001b5a:	d900      	bls.n	8001b5e <HAL_TIM_PWM_ConfigChannel+0x32>
 8001b5c:	e095      	b.n	8001c8a <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d04e      	beq.n	8001c02 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d900      	bls.n	8001b6c <HAL_TIM_PWM_ConfigChannel+0x40>
 8001b6a:	e08e      	b.n	8001c8a <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d021      	beq.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001b78:	e087      	b.n	8001c8a <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	0011      	movs	r1, r2
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 f9ce 	bl	8001f24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2108      	movs	r1, #8
 8001b94:	430a      	orrs	r2, r1
 8001b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6999      	ldr	r1, [r3, #24]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	619a      	str	r2, [r3, #24]
      break;
 8001bba:	e067      	b.n	8001c8c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 fa35 	bl	8002034 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0109      	lsls	r1, r1, #4
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	492e      	ldr	r1, [pc, #184]	; (8001ca0 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6999      	ldr	r1, [r3, #24]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	021a      	lsls	r2, r3, #8
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
      break;
 8001c00:	e044      	b.n	8001c8c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	0011      	movs	r1, r2
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f000 fa96 	bl	800213c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2108      	movs	r1, #8
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69d9      	ldr	r1, [r3, #28]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	61da      	str	r2, [r3, #28]
      break;
 8001c42:	e023      	b.n	8001c8c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 fafb 	bl	8002248 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0109      	lsls	r1, r1, #4
 8001c60:	430a      	orrs	r2, r1
 8001c62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69d9      	ldr	r1, [r3, #28]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	021a      	lsls	r2, r3, #8
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	61da      	str	r2, [r3, #28]
      break;
 8001c88:	e000      	b.n	8001c8c <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8001c8a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	223c      	movs	r2, #60	; 0x3c
 8001c90:	2100      	movs	r1, #0
 8001c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b004      	add	sp, #16
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	fffffbff 	.word	0xfffffbff

08001ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223c      	movs	r2, #60	; 0x3c
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_TIM_ConfigClockSource+0x18>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e0b7      	b.n	8001e2c <HAL_TIM_ConfigClockSource+0x188>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	223c      	movs	r2, #60	; 0x3c
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	223d      	movs	r2, #61	; 0x3d
 8001cc8:	2102      	movs	r1, #2
 8001cca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2277      	movs	r2, #119	; 0x77
 8001cd8:	4393      	bics	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a55      	ldr	r2, [pc, #340]	; (8001e34 <HAL_TIM_ConfigClockSource+0x190>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0192      	lsls	r2, r2, #6
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d040      	beq.n	8001d7a <HAL_TIM_ConfigClockSource+0xd6>
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	0192      	lsls	r2, r2, #6
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d900      	bls.n	8001d02 <HAL_TIM_ConfigClockSource+0x5e>
 8001d00:	e088      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	0152      	lsls	r2, r2, #5
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d100      	bne.n	8001d0c <HAL_TIM_ConfigClockSource+0x68>
 8001d0a:	e085      	b.n	8001e18 <HAL_TIM_ConfigClockSource+0x174>
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0152      	lsls	r2, r2, #5
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d900      	bls.n	8001d16 <HAL_TIM_ConfigClockSource+0x72>
 8001d14:	e07e      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d16:	2b70      	cmp	r3, #112	; 0x70
 8001d18:	d018      	beq.n	8001d4c <HAL_TIM_ConfigClockSource+0xa8>
 8001d1a:	d900      	bls.n	8001d1e <HAL_TIM_ConfigClockSource+0x7a>
 8001d1c:	e07a      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d1e:	2b60      	cmp	r3, #96	; 0x60
 8001d20:	d04f      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x11e>
 8001d22:	d900      	bls.n	8001d26 <HAL_TIM_ConfigClockSource+0x82>
 8001d24:	e076      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d26:	2b50      	cmp	r3, #80	; 0x50
 8001d28:	d03b      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0xfe>
 8001d2a:	d900      	bls.n	8001d2e <HAL_TIM_ConfigClockSource+0x8a>
 8001d2c:	e072      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d2e:	2b40      	cmp	r3, #64	; 0x40
 8001d30:	d057      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0x13e>
 8001d32:	d900      	bls.n	8001d36 <HAL_TIM_ConfigClockSource+0x92>
 8001d34:	e06e      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d36:	2b30      	cmp	r3, #48	; 0x30
 8001d38:	d063      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15e>
 8001d3a:	d86b      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d060      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15e>
 8001d40:	d868      	bhi.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d05d      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15e>
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d05b      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d4a:	e063      	b.n	8001e14 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6899      	ldr	r1, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f000 fb58 	bl	8002410 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2277      	movs	r2, #119	; 0x77
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	609a      	str	r2, [r3, #8]
      break;
 8001d78:	e04f      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6899      	ldr	r1, [r3, #8]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f000 fb41 	bl	8002410 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	01c9      	lsls	r1, r1, #7
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
      break;
 8001da0:	e03b      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	001a      	movs	r2, r3
 8001db0:	f000 fab4 	bl	800231c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2150      	movs	r1, #80	; 0x50
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fb0e 	bl	80023dc <TIM_ITRx_SetConfig>
      break;
 8001dc0:	e02b      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	f000 fad2 	bl	8002378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2160      	movs	r1, #96	; 0x60
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fafe 	bl	80023dc <TIM_ITRx_SetConfig>
      break;
 8001de0:	e01b      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	001a      	movs	r2, r3
 8001df0:	f000 fa94 	bl	800231c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 faee 	bl	80023dc <TIM_ITRx_SetConfig>
      break;
 8001e00:	e00b      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	0010      	movs	r0, r2
 8001e0e:	f000 fae5 	bl	80023dc <TIM_ITRx_SetConfig>
        break;
 8001e12:	e002      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	e000      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001e18:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	223d      	movs	r2, #61	; 0x3d
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	223c      	movs	r2, #60	; 0x3c
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b004      	add	sp, #16
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	ffff00ff 	.word	0xffff00ff

08001e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a2f      	ldr	r2, [pc, #188]	; (8001f08 <TIM_Base_SetConfig+0xd0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d003      	beq.n	8001e58 <TIM_Base_SetConfig+0x20>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a2e      	ldr	r2, [pc, #184]	; (8001f0c <TIM_Base_SetConfig+0xd4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d108      	bne.n	8001e6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2270      	movs	r2, #112	; 0x70
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <TIM_Base_SetConfig+0xd0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <TIM_Base_SetConfig+0x62>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <TIM_Base_SetConfig+0xd4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00f      	beq.n	8001e9a <TIM_Base_SetConfig+0x62>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <TIM_Base_SetConfig+0xd8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00b      	beq.n	8001e9a <TIM_Base_SetConfig+0x62>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <TIM_Base_SetConfig+0xdc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <TIM_Base_SetConfig+0x62>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <TIM_Base_SetConfig+0xe0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d003      	beq.n	8001e9a <TIM_Base_SetConfig+0x62>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <TIM_Base_SetConfig+0xe4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <TIM_Base_SetConfig+0xe8>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <TIM_Base_SetConfig+0xd0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00b      	beq.n	8001ef2 <TIM_Base_SetConfig+0xba>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <TIM_Base_SetConfig+0xdc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <TIM_Base_SetConfig+0xba>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <TIM_Base_SetConfig+0xe0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <TIM_Base_SetConfig+0xba>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <TIM_Base_SetConfig+0xe4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d103      	bne.n	8001efa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	615a      	str	r2, [r3, #20]
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b004      	add	sp, #16
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40002000 	.word	0x40002000
 8001f14:	40014000 	.word	0x40014000
 8001f18:	40014400 	.word	0x40014400
 8001f1c:	40014800 	.word	0x40014800
 8001f20:	fffffcff 	.word	0xfffffcff

08001f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4393      	bics	r3, r2
 8001f36:	001a      	movs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2270      	movs	r2, #112	; 0x70
 8001f52:	4393      	bics	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <TIM_OC1_SetConfig+0xf8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <TIM_OC1_SetConfig+0x76>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a26      	ldr	r2, [pc, #152]	; (8002020 <TIM_OC1_SetConfig+0xfc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <TIM_OC1_SetConfig+0x76>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <TIM_OC1_SetConfig+0x100>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_OC1_SetConfig+0x76>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <TIM_OC1_SetConfig+0x104>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10c      	bne.n	8001fb4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a19      	ldr	r2, [pc, #100]	; (800201c <TIM_OC1_SetConfig+0xf8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00b      	beq.n	8001fd4 <TIM_OC1_SetConfig+0xb0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <TIM_OC1_SetConfig+0xfc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <TIM_OC1_SetConfig+0xb0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <TIM_OC1_SetConfig+0x100>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <TIM_OC1_SetConfig+0xb0>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <TIM_OC1_SetConfig+0x104>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d111      	bne.n	8001ff8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <TIM_OC1_SetConfig+0x108>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4a14      	ldr	r2, [pc, #80]	; (8002030 <TIM_OC1_SetConfig+0x10c>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	621a      	str	r2, [r3, #32]
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b006      	add	sp, #24
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40014000 	.word	0x40014000
 8002024:	40014400 	.word	0x40014400
 8002028:	40014800 	.word	0x40014800
 800202c:	fffffeff 	.word	0xfffffeff
 8002030:	fffffdff 	.word	0xfffffdff

08002034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2210      	movs	r2, #16
 8002044:	4393      	bics	r3, r2
 8002046:	001a      	movs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a2e      	ldr	r2, [pc, #184]	; (800211c <TIM_OC2_SetConfig+0xe8>)
 8002062:	4013      	ands	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <TIM_OC2_SetConfig+0xec>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2220      	movs	r2, #32
 800207e:	4393      	bics	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a24      	ldr	r2, [pc, #144]	; (8002124 <TIM_OC2_SetConfig+0xf0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10d      	bne.n	80020b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	4393      	bics	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	4393      	bics	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <TIM_OC2_SetConfig+0xf0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00b      	beq.n	80020d2 <TIM_OC2_SetConfig+0x9e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <TIM_OC2_SetConfig+0xf4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <TIM_OC2_SetConfig+0x9e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <TIM_OC2_SetConfig+0xf8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_OC2_SetConfig+0x9e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <TIM_OC2_SetConfig+0xfc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d113      	bne.n	80020fa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <TIM_OC2_SetConfig+0x100>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4a16      	ldr	r2, [pc, #88]	; (8002138 <TIM_OC2_SetConfig+0x104>)
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	621a      	str	r2, [r3, #32]
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b006      	add	sp, #24
 800211a:	bd80      	pop	{r7, pc}
 800211c:	ffff8fff 	.word	0xffff8fff
 8002120:	fffffcff 	.word	0xfffffcff
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	fffffbff 	.word	0xfffffbff
 8002138:	fffff7ff 	.word	0xfffff7ff

0800213c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a35      	ldr	r2, [pc, #212]	; (8002220 <TIM_OC3_SetConfig+0xe4>)
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2270      	movs	r2, #112	; 0x70
 8002168:	4393      	bics	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2203      	movs	r2, #3
 8002170:	4393      	bics	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	4a28      	ldr	r2, [pc, #160]	; (8002224 <TIM_OC3_SetConfig+0xe8>)
 8002182:	4013      	ands	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a24      	ldr	r2, [pc, #144]	; (8002228 <TIM_OC3_SetConfig+0xec>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10d      	bne.n	80021b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	4a23      	ldr	r2, [pc, #140]	; (800222c <TIM_OC3_SetConfig+0xf0>)
 800219e:	4013      	ands	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <TIM_OC3_SetConfig+0xf4>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <TIM_OC3_SetConfig+0xec>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00b      	beq.n	80021d6 <TIM_OC3_SetConfig+0x9a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <TIM_OC3_SetConfig+0xf8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <TIM_OC3_SetConfig+0x9a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <TIM_OC3_SetConfig+0xfc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_OC3_SetConfig+0x9a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <TIM_OC3_SetConfig+0x100>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d113      	bne.n	80021fe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <TIM_OC3_SetConfig+0x104>)
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <TIM_OC3_SetConfig+0x108>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	621a      	str	r2, [r3, #32]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b006      	add	sp, #24
 800221e:	bd80      	pop	{r7, pc}
 8002220:	fffffeff 	.word	0xfffffeff
 8002224:	fffffdff 	.word	0xfffffdff
 8002228:	40012c00 	.word	0x40012c00
 800222c:	fffff7ff 	.word	0xfffff7ff
 8002230:	fffffbff 	.word	0xfffffbff
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800
 8002240:	ffffefff 	.word	0xffffefff
 8002244:	ffffdfff 	.word	0xffffdfff

08002248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a28      	ldr	r2, [pc, #160]	; (80022f8 <TIM_OC4_SetConfig+0xb0>)
 8002258:	401a      	ands	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <TIM_OC4_SetConfig+0xb4>)
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a21      	ldr	r2, [pc, #132]	; (8002300 <TIM_OC4_SetConfig+0xb8>)
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <TIM_OC4_SetConfig+0xbc>)
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	031b      	lsls	r3, r3, #12
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a19      	ldr	r2, [pc, #100]	; (8002308 <TIM_OC4_SetConfig+0xc0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00b      	beq.n	80022c0 <TIM_OC4_SetConfig+0x78>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <TIM_OC4_SetConfig+0xc4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <TIM_OC4_SetConfig+0x78>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <TIM_OC4_SetConfig+0xc8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_OC4_SetConfig+0x78>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <TIM_OC4_SetConfig+0xcc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d109      	bne.n	80022d4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4a15      	ldr	r2, [pc, #84]	; (8002318 <TIM_OC4_SetConfig+0xd0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	019b      	lsls	r3, r3, #6
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	621a      	str	r2, [r3, #32]
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b006      	add	sp, #24
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	ffffefff 	.word	0xffffefff
 80022fc:	ffff8fff 	.word	0xffff8fff
 8002300:	fffffcff 	.word	0xfffffcff
 8002304:	ffffdfff 	.word	0xffffdfff
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40014000 	.word	0x40014000
 8002310:	40014400 	.word	0x40014400
 8002314:	40014800 	.word	0x40014800
 8002318:	ffffbfff 	.word	0xffffbfff

0800231c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	2201      	movs	r2, #1
 8002334:	4393      	bics	r3, r2
 8002336:	001a      	movs	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	22f0      	movs	r2, #240	; 0xf0
 8002346:	4393      	bics	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	220a      	movs	r2, #10
 8002358:	4393      	bics	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	621a      	str	r2, [r3, #32]
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b006      	add	sp, #24
 8002376:	bd80      	pop	{r7, pc}

08002378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	2210      	movs	r2, #16
 800238a:	4393      	bics	r3, r2
 800238c:	001a      	movs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <TIM_TI2_ConfigInputStage+0x60>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	031b      	lsls	r3, r3, #12
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	22a0      	movs	r2, #160	; 0xa0
 80023b4:	4393      	bics	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	621a      	str	r2, [r3, #32]
}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b006      	add	sp, #24
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	ffff0fff 	.word	0xffff0fff

080023dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2270      	movs	r2, #112	; 0x70
 80023f0:	4393      	bics	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	2207      	movs	r2, #7
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	609a      	str	r2, [r3, #8]
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b004      	add	sp, #16
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <TIM_ETR_SetConfig+0x3c>)
 8002428:	4013      	ands	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	021a      	lsls	r2, r3, #8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	431a      	orrs	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	ffff00ff 	.word	0xffff00ff

08002450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	221f      	movs	r2, #31
 8002460:	4013      	ands	r3, r2
 8002462:	2201      	movs	r2, #1
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	43d2      	mvns	r2, r2
 8002472:	401a      	ands	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	211f      	movs	r1, #31
 8002480:	400b      	ands	r3, r1
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4099      	lsls	r1, r3
 8002486:	000b      	movs	r3, r1
 8002488:	431a      	orrs	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b006      	add	sp, #24
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	223c      	movs	r2, #60	; 0x3c
 80024a6:	5c9b      	ldrb	r3, [r3, r2]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e041      	b.n	8002534 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	223c      	movs	r2, #60	; 0x3c
 80024b4:	2101      	movs	r1, #1
 80024b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	223d      	movs	r2, #61	; 0x3d
 80024bc:	2102      	movs	r1, #2
 80024be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2270      	movs	r2, #112	; 0x70
 80024d4:	4393      	bics	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d10c      	bne.n	8002522 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	4393      	bics	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	4313      	orrs	r3, r2
 8002518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	223d      	movs	r2, #61	; 0x3d
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	223c      	movs	r2, #60	; 0x3c
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40000400 	.word	0x40000400
 8002544:	40014000 	.word	0x40014000

08002548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e044      	b.n	80025e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2274      	movs	r2, #116	; 0x74
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fe f971 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2224      	movs	r2, #36	; 0x24
 8002576:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f830 	bl	80025f0 <UART_SetConfig>
 8002590:	0003      	movs	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e024      	b.n	80025e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 f97b 	bl	80028a0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	490d      	ldr	r1, [pc, #52]	; (80025ec <HAL_UART_Init+0xa4>)
 80025b6:	400a      	ands	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2108      	movs	r1, #8
 80025c6:	438a      	bics	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 fa13 	bl	8002a08 <UART_CheckIdleState>
 80025e2:	0003      	movs	r3, r0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	fffff7ff 	.word	0xfffff7ff

080025f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025f8:	231e      	movs	r3, #30
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a97      	ldr	r2, [pc, #604]	; (800287c <UART_SetConfig+0x28c>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a92      	ldr	r2, [pc, #584]	; (8002880 <UART_SetConfig+0x290>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a89      	ldr	r2, [pc, #548]	; (8002884 <UART_SetConfig+0x294>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a85      	ldr	r2, [pc, #532]	; (8002888 <UART_SetConfig+0x298>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d127      	bne.n	80026c6 <UART_SetConfig+0xd6>
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <UART_SetConfig+0x29c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	2203      	movs	r2, #3
 800267c:	4013      	ands	r3, r2
 800267e:	2b03      	cmp	r3, #3
 8002680:	d00d      	beq.n	800269e <UART_SetConfig+0xae>
 8002682:	d81b      	bhi.n	80026bc <UART_SetConfig+0xcc>
 8002684:	2b02      	cmp	r3, #2
 8002686:	d014      	beq.n	80026b2 <UART_SetConfig+0xc2>
 8002688:	d818      	bhi.n	80026bc <UART_SetConfig+0xcc>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <UART_SetConfig+0xa4>
 800268e:	2b01      	cmp	r3, #1
 8002690:	d00a      	beq.n	80026a8 <UART_SetConfig+0xb8>
 8002692:	e013      	b.n	80026bc <UART_SetConfig+0xcc>
 8002694:	231f      	movs	r3, #31
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e035      	b.n	800270a <UART_SetConfig+0x11a>
 800269e:	231f      	movs	r3, #31
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e030      	b.n	800270a <UART_SetConfig+0x11a>
 80026a8:	231f      	movs	r3, #31
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2204      	movs	r2, #4
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e02b      	b.n	800270a <UART_SetConfig+0x11a>
 80026b2:	231f      	movs	r3, #31
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2208      	movs	r2, #8
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e026      	b.n	800270a <UART_SetConfig+0x11a>
 80026bc:	231f      	movs	r3, #31
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2210      	movs	r2, #16
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e021      	b.n	800270a <UART_SetConfig+0x11a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a71      	ldr	r2, [pc, #452]	; (8002890 <UART_SetConfig+0x2a0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d104      	bne.n	80026da <UART_SetConfig+0xea>
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e017      	b.n	800270a <UART_SetConfig+0x11a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6d      	ldr	r2, [pc, #436]	; (8002894 <UART_SetConfig+0x2a4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d104      	bne.n	80026ee <UART_SetConfig+0xfe>
 80026e4:	231f      	movs	r3, #31
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e00d      	b.n	800270a <UART_SetConfig+0x11a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a69      	ldr	r2, [pc, #420]	; (8002898 <UART_SetConfig+0x2a8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d104      	bne.n	8002702 <UART_SetConfig+0x112>
 80026f8:	231f      	movs	r3, #31
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e003      	b.n	800270a <UART_SetConfig+0x11a>
 8002702:	231f      	movs	r3, #31
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2210      	movs	r2, #16
 8002708:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	429a      	cmp	r2, r3
 8002714:	d15d      	bne.n	80027d2 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8002716:	231f      	movs	r3, #31
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d015      	beq.n	800274c <UART_SetConfig+0x15c>
 8002720:	dc18      	bgt.n	8002754 <UART_SetConfig+0x164>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d00d      	beq.n	8002742 <UART_SetConfig+0x152>
 8002726:	dc15      	bgt.n	8002754 <UART_SetConfig+0x164>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <UART_SetConfig+0x142>
 800272c:	2b02      	cmp	r3, #2
 800272e:	d005      	beq.n	800273c <UART_SetConfig+0x14c>
 8002730:	e010      	b.n	8002754 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002732:	f7ff f847 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
        break;
 800273a:	e012      	b.n	8002762 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800273c:	4b57      	ldr	r3, [pc, #348]	; (800289c <UART_SetConfig+0x2ac>)
 800273e:	61bb      	str	r3, [r7, #24]
        break;
 8002740:	e00f      	b.n	8002762 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002742:	f7fe ffcf 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8002746:	0003      	movs	r3, r0
 8002748:	61bb      	str	r3, [r7, #24]
        break;
 800274a:	e00a      	b.n	8002762 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	61bb      	str	r3, [r7, #24]
        break;
 8002752:	e006      	b.n	8002762 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002758:	231e      	movs	r3, #30
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
        break;
 8002760:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d100      	bne.n	800276a <UART_SetConfig+0x17a>
 8002768:	e07b      	b.n	8002862 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	005a      	lsls	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	18d2      	adds	r2, r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0019      	movs	r1, r3
 800277c:	0010      	movs	r0, r2
 800277e:	f7fd fcc3 	bl	8000108 <__udivsi3>
 8002782:	0003      	movs	r3, r0
 8002784:	b29b      	uxth	r3, r3
 8002786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d91c      	bls.n	80027c8 <UART_SetConfig+0x1d8>
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	429a      	cmp	r2, r3
 8002796:	d217      	bcs.n	80027c8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	b29a      	uxth	r2, r3
 800279c:	200e      	movs	r0, #14
 800279e:	183b      	adds	r3, r7, r0
 80027a0:	210f      	movs	r1, #15
 80027a2:	438a      	bics	r2, r1
 80027a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2207      	movs	r2, #7
 80027ae:	4013      	ands	r3, r2
 80027b0:	b299      	uxth	r1, r3
 80027b2:	183b      	adds	r3, r7, r0
 80027b4:	183a      	adds	r2, r7, r0
 80027b6:	8812      	ldrh	r2, [r2, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	183a      	adds	r2, r7, r0
 80027c2:	8812      	ldrh	r2, [r2, #0]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e04c      	b.n	8002862 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80027c8:	231e      	movs	r3, #30
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e047      	b.n	8002862 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027d2:	231f      	movs	r3, #31
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d015      	beq.n	8002808 <UART_SetConfig+0x218>
 80027dc:	dc18      	bgt.n	8002810 <UART_SetConfig+0x220>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00d      	beq.n	80027fe <UART_SetConfig+0x20e>
 80027e2:	dc15      	bgt.n	8002810 <UART_SetConfig+0x220>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <UART_SetConfig+0x1fe>
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d005      	beq.n	80027f8 <UART_SetConfig+0x208>
 80027ec:	e010      	b.n	8002810 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ee:	f7fe ffe9 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 80027f2:	0003      	movs	r3, r0
 80027f4:	61bb      	str	r3, [r7, #24]
        break;
 80027f6:	e012      	b.n	800281e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <UART_SetConfig+0x2ac>)
 80027fa:	61bb      	str	r3, [r7, #24]
        break;
 80027fc:	e00f      	b.n	800281e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027fe:	f7fe ff71 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8002802:	0003      	movs	r3, r0
 8002804:	61bb      	str	r3, [r7, #24]
        break;
 8002806:	e00a      	b.n	800281e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	61bb      	str	r3, [r7, #24]
        break;
 800280e:	e006      	b.n	800281e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002814:	231e      	movs	r3, #30
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
        break;
 800281c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01e      	beq.n	8002862 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	085a      	lsrs	r2, r3, #1
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	18d2      	adds	r2, r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0019      	movs	r1, r3
 8002834:	0010      	movs	r0, r2
 8002836:	f7fd fc67 	bl	8000108 <__udivsi3>
 800283a:	0003      	movs	r3, r0
 800283c:	b29b      	uxth	r3, r3
 800283e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b0f      	cmp	r3, #15
 8002844:	d909      	bls.n	800285a <UART_SetConfig+0x26a>
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	429a      	cmp	r2, r3
 800284e:	d204      	bcs.n	800285a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	e003      	b.n	8002862 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800285a:	231e      	movs	r3, #30
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800286e:	231e      	movs	r3, #30
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	781b      	ldrb	r3, [r3, #0]
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b008      	add	sp, #32
 800287a:	bd80      	pop	{r7, pc}
 800287c:	efff69f3 	.word	0xefff69f3
 8002880:	ffffcfff 	.word	0xffffcfff
 8002884:	fffff4ff 	.word	0xfffff4ff
 8002888:	40013800 	.word	0x40013800
 800288c:	40021000 	.word	0x40021000
 8002890:	40004400 	.word	0x40004400
 8002894:	40004800 	.word	0x40004800
 8002898:	40004c00 	.word	0x40004c00
 800289c:	007a1200 	.word	0x007a1200

080028a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00b      	beq.n	80028ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a4a      	ldr	r2, [pc, #296]	; (80029e4 <UART_AdvFeatureConfig+0x144>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00b      	beq.n	80028ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a43      	ldr	r2, [pc, #268]	; (80029e8 <UART_AdvFeatureConfig+0x148>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2204      	movs	r2, #4
 80028f2:	4013      	ands	r3, r2
 80028f4:	d00b      	beq.n	800290e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a3b      	ldr	r2, [pc, #236]	; (80029ec <UART_AdvFeatureConfig+0x14c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2208      	movs	r2, #8
 8002914:	4013      	ands	r3, r2
 8002916:	d00b      	beq.n	8002930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <UART_AdvFeatureConfig+0x150>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2210      	movs	r2, #16
 8002936:	4013      	ands	r3, r2
 8002938:	d00b      	beq.n	8002952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a2c      	ldr	r2, [pc, #176]	; (80029f4 <UART_AdvFeatureConfig+0x154>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2220      	movs	r2, #32
 8002958:	4013      	ands	r3, r2
 800295a:	d00b      	beq.n	8002974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4a25      	ldr	r2, [pc, #148]	; (80029f8 <UART_AdvFeatureConfig+0x158>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	4013      	ands	r3, r2
 800297c:	d01d      	beq.n	80029ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <UART_AdvFeatureConfig+0x15c>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	035b      	lsls	r3, r3, #13
 800299e:	429a      	cmp	r2, r3
 80029a0:	d10b      	bne.n	80029ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <UART_AdvFeatureConfig+0x160>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	4013      	ands	r3, r2
 80029c2:	d00b      	beq.n	80029dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <UART_AdvFeatureConfig+0x164>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	fffdffff 	.word	0xfffdffff
 80029e8:	fffeffff 	.word	0xfffeffff
 80029ec:	fffbffff 	.word	0xfffbffff
 80029f0:	ffff7fff 	.word	0xffff7fff
 80029f4:	ffffefff 	.word	0xffffefff
 80029f8:	ffffdfff 	.word	0xffffdfff
 80029fc:	ffefffff 	.word	0xffefffff
 8002a00:	ff9fffff 	.word	0xff9fffff
 8002a04:	fff7ffff 	.word	0xfff7ffff

08002a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	2100      	movs	r1, #0
 8002a16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a18:	f7fe f808 	bl	8000a2c <HAL_GetTick>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2208      	movs	r2, #8
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d10c      	bne.n	8002a48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	0391      	lsls	r1, r2, #14
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <UART_CheckIdleState+0x8c>)
 8002a38:	9200      	str	r2, [sp, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f000 f82c 	bl	8002a98 <UART_WaitOnFlagUntilTimeout>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e021      	b.n	8002a8c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d10c      	bne.n	8002a70 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	03d1      	lsls	r1, r2, #15
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <UART_CheckIdleState+0x8c>)
 8002a60:	9200      	str	r2, [sp, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f000 f818 	bl	8002a98 <UART_WaitOnFlagUntilTimeout>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d001      	beq.n	8002a70 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e00d      	b.n	8002a8c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2274      	movs	r2, #116	; 0x74
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	01ffffff 	.word	0x01ffffff

08002a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa8:	e05e      	b.n	8002b68 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	3301      	adds	r3, #1
 8002aae:	d05b      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab0:	f7fd ffbc 	bl	8000a2c <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d302      	bcc.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11b      	bne.n	8002afe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	492f      	ldr	r1, [pc, #188]	; (8002b90 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	438a      	bics	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2274      	movs	r2, #116	; 0x74
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e044      	b.n	8002b88 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	d02e      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	401a      	ands	r2, r3
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d124      	bne.n	8002b68 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4917      	ldr	r1, [pc, #92]	; (8002b90 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2101      	movs	r1, #1
 8002b44:	438a      	bics	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	2120      	movs	r1, #32
 8002b5a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2274      	movs	r2, #116	; 0x74
 8002b60:	2100      	movs	r1, #0
 8002b62:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e00f      	b.n	8002b88 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	425a      	negs	r2, r3
 8002b78:	4153      	adcs	r3, r2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	1dfb      	adds	r3, r7, #7
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d091      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b004      	add	sp, #16
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	fffffe5f 	.word	0xfffffe5f

08002b94 <__libc_init_array>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	2600      	movs	r6, #0
 8002b98:	4d0c      	ldr	r5, [pc, #48]	; (8002bcc <__libc_init_array+0x38>)
 8002b9a:	4c0d      	ldr	r4, [pc, #52]	; (8002bd0 <__libc_init_array+0x3c>)
 8002b9c:	1b64      	subs	r4, r4, r5
 8002b9e:	10a4      	asrs	r4, r4, #2
 8002ba0:	42a6      	cmp	r6, r4
 8002ba2:	d109      	bne.n	8002bb8 <__libc_init_array+0x24>
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	f000 f821 	bl	8002bec <_init>
 8002baa:	4d0a      	ldr	r5, [pc, #40]	; (8002bd4 <__libc_init_array+0x40>)
 8002bac:	4c0a      	ldr	r4, [pc, #40]	; (8002bd8 <__libc_init_array+0x44>)
 8002bae:	1b64      	subs	r4, r4, r5
 8002bb0:	10a4      	asrs	r4, r4, #2
 8002bb2:	42a6      	cmp	r6, r4
 8002bb4:	d105      	bne.n	8002bc2 <__libc_init_array+0x2e>
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	00b3      	lsls	r3, r6, #2
 8002bba:	58eb      	ldr	r3, [r5, r3]
 8002bbc:	4798      	blx	r3
 8002bbe:	3601      	adds	r6, #1
 8002bc0:	e7ee      	b.n	8002ba0 <__libc_init_array+0xc>
 8002bc2:	00b3      	lsls	r3, r6, #2
 8002bc4:	58eb      	ldr	r3, [r5, r3]
 8002bc6:	4798      	blx	r3
 8002bc8:	3601      	adds	r6, #1
 8002bca:	e7f2      	b.n	8002bb2 <__libc_init_array+0x1e>
 8002bcc:	08002c3c 	.word	0x08002c3c
 8002bd0:	08002c3c 	.word	0x08002c3c
 8002bd4:	08002c3c 	.word	0x08002c3c
 8002bd8:	08002c40 	.word	0x08002c40

08002bdc <memset>:
 8002bdc:	0003      	movs	r3, r0
 8002bde:	1882      	adds	r2, r0, r2
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d100      	bne.n	8002be6 <memset+0xa>
 8002be4:	4770      	bx	lr
 8002be6:	7019      	strb	r1, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	e7f9      	b.n	8002be0 <memset+0x4>

08002bec <_init>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr

08002bf8 <_fini>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr
